git clone https://oauth2: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@github.com/2fucu9/mash-playbook

wget http://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso
wget http://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso

deluser dog

cd ..
rm -r ansible_selfhosted
git clone https://oauth2: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@github.com/2fucu9/ansible_selfhosted
cd ansible_selfhosted

apt update &&  apt upgrade -y
reboot
apt autoremove -y
reboot

#for errors with updating snap store
snap-store --quit && sudo snap refresh snap-store

#upgrade release 
do-release-upgrade
do-release-upgrade -d

#net testing
apt install iperf
iperf -s

apt install iftop

<#ssh key login https://help.ubuntu.com/community/SSH/OpenSSH/Keys
mkdir ~/.ssh
chmod 700 ~/.ssh
#generate in puttygen, copy from middle
nano /root/.ssh/authorized_keys
#>


#comment uncomment https://stackoverflow.com/questions/24889346/how-to-uncomment-a-line-that-contains-a-specific-string-using-sed

#nano /etc/ssh/sshd_config
# nano /etc/ssh/sshd_config.d/50*
sed -i '/PasswordAuthentication yes/s/^#//g' /etc/ssh/sshd_config
sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config
sed -i '/PubkeyAuthentication no/s/^#//g' /etc/ssh/sshd_config
sed -i 's/PubkeyAuthentication no/PubkeyAuthentication yes/g' /etc/ssh/sshd_config
sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config.d/50-cloud-init.conf
systemctl restart ssh
systemctl restart ssh.service

<#uncomment
PermitRootLogin yes
PubkeyAuthentication yes
PasswordAuthentication no
systemctl restart sshd
#>

#ipv6 disable
ip -6 addr show
nano /etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT="ipv6.disable=1"
update-grub
reboot
ip -6 addr show


#>

<#

ufw status
ufw enable

ufw allow 51820/udp

ufw allow 27987/tcp
ufw allow 57023/tcp

ufw allow 22/tcp
ufw allow 443/tcp
ufw allow 80/tcp

ufw allow 53/udp
ufw allow 853/tcp

ufw allow 25/tcp
ufw allow 110/tcp
ufw allow 143/tcp
ufw allow 465/tcp
ufw allow 587/tcp
ufw allow 993/tcp
ufw allow 995/tcp


ufw reload
ufw status

ufw reset
ufw allow 22/tcp
ufw allow 51820/udp
ufw allow in on tailscale0 to any port 80 proto tcp
ufw allow in on tailscale0 to any port 443 proto tcp
ufw allow in on tailscale0 to any port 53 proto udp
ufw allow in on tailscale0 to any port 853 proto tcp
ufw enable
ufw status
reboot

#ufw disable IPv6
nano /etc/default/ufw
IPV6=no

#>



hostnamectl set-hostname 3xui-ny
timedatectl set-timezone UTC




#>


#download pscp to copy files between windows and ubuntu
pscp -pw !kYCB#9S5T#SmohehVPw9%YUh2X5kH7Y root@77.238.249.23:/root/pki/smime_ds_qubitpilot.p12 D:\smime_ds_qubitpilot.p12 
pscp -pw Zaebok24! "D:\vdsina-amskey1-privatekey.pem" root@10.14.17.252:~/.ssh/vdsina-amskey1-privatekey.pem
pscp -i "C:\Users\media\Nextcloud2\vds\ams\vdsina-amskey1-privatekey.ppk" C:\Users\media\Nextcloud2\vds\ams\vdsina-amskey1-privatekey.pem root@89.110.66.138:/root/.ssh/vdsina-amskey1-privatekey.pem 
pscp -i "C:\Users\media\Nextcloud2\vds\ams\vdsina-amskey1-privatekey.ppk" D:\soft\nuc13\I226-V_Release_29.1.1.1\PRO1000\LINUX\igb-5.16.3.tar.gz root@0.14.17.31:/root/ixgbe/igb-5.16.3.tar.gz

scp D:\vdsina-amskey1-privatekey.pem root@10.14.17.252:~/.ssh/vdsina-amskey1-privatekey.pem
scp -i ~/.ssh/fchkey1.pem /var/kvm/images/adh-wg-tail.img root@10.14.17.252:~/
scp -i ~/.ssh/fchkey1.pem root@10.14.17.252:~/adh-wg-tail.img ~/ 

scp -i ~/.ssh/vdsina-amskey1-privatekey.pem /opt/backup/mailcowbackup.tar root@194.247.183.226:/opt/backup/

scp D:\vdsina-amskey1-privatekey.pem root@10.14.17.252:~/.ssh/vdsina-amskey1-privatekey.pem

scp D:\soft\nuc13\I226-V_Release_29.1.1.1\PRO1000\LINUX\igb-5.16.3.tar.gz root@10.14.17.252:~/.ssh/vdsina-amskey1-privatekey.pem

#3x-ui server
#generate ssl
openssl req -x509 -keyout /etc/ssl/certs/3x-ui.key -out /etc/ssl/certs/3x-ui.pem -newkey rsa:4096 -sha256 -days 3650 -nodes -new
#install 3x-ui
bash <(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh)
#change access port to random, specify ssl details in panel config

<#nextcloud 
#ubuntu server pre-installed
#snap install
snap install nextcloud

http://nxtclo.qubitpilot.net
set root acct
#also use for renewal. enable ufw 80 before renewal
nextcloud.enable-https lets-encrypt
ds@qubitpilot.net
nextcloud.occ config:system:set trusted_domains 0 --value=nxtclo.qubitpilot.net
snap run nextcloud.occ config:system:set default_phone_region --value=RU
snap restart nextcloud
ignore imagick warning/ not supported in snap

#update
snap refresh nextcloud
#>




#password manager vaultwarden https://docs.vultr.com/how-to-install-vaultwarden-on-ubuntu-20-04
#snap install


apt remove docker docker.io containerd runc
snap install core; sudo snap refresh core
snap install docker
mkdir ~/vaultwarden
cd ~/vaultwarden
reboot

nano ~/vaultwarden/docker-compose.yml

<#
 version: '3'

 services:
   vaultwarden:
     image: vaultwarden/server:latest
     container_name: vaultwarden
     restart: always
     environment:
       - LOGIN_RATELIMIT_MAX_BURST=10
       - LOGIN_RATELIMIT_SECONDS=60
       - ADMIN_RATELIMIT_MAX_BURST=10
       - ADMIN_RATELIMIT_SECONDS=60
       - ADMIN_TOKEN=83a63i8dq9fxkhektntgxz7j9uvyswat3aafeya6
       - SENDS_ALLOWED=true
       - EMERGENCY_ACCESS_ALLOWED=true
       - WEB_VAULT_ENABLED=true
       - WEBSOCKET_ENABLED=true
       - SIGNUPS_ALLOWED=false
       - SMTP_HOST=mail.qubitpilot.net
       - SMTP_FROM=ds@qubitpilot.net
       - SMTP_PORT=587
       - SMTP_SSL=true
       - SMTP_USERNAME=ds@qubitpilot.net
       - SMTP_PASSWORD=!kYCB#9S5T#SmohehVPw9%YUh2X5kH7Y
       - DOMAIN=https://vw.qubitpilot.net
      
     volumes:
       - ./vw-data:/data

   caddy:
     image: caddy:2
     container_name: caddy
     restart: always
     ports:
       - 80:80
       - 443:443
     volumes:
       - ./Caddyfile:/etc/caddy/Caddyfile:ro
       - ./caddy-config:/config
       - ./caddy-data:/data
     environment:
       - DOMAIN=https://vw.qubitpilot.net
       - EMAIL=ds@qubitpilot.net
       - LOG_FILE=/data/access.log
       

#>


nano Caddyfile
<#
{$DOMAIN}:443 {
   log {
     level INFO
     output file {$LOG_FILE} {
       roll_size 10MB
       roll_keep 10
     }
   }

   # Get a cert by using the ACME HTTP-01 challenge.
   tls {$EMAIL}

   encode gzip

   # Headers to improve security.
   header {
   # Enable HSTS
   Strict-Transport-Security "max-age=31536000;"

   # Enable cross-site filter (XSS)
   X-XSS-Protection "1; mode=block"

   # Disallow the site to be rendered within a frame (clickjacking protection)
   X-Frame-Options "DENY"

   # Prevent search engines from indexing
   X-Robots-Tag "none"

   # Remove Caddy branding
   -Server
   }

   # Redirect notifications to the WebSocket.
   reverse_proxy /notifications/hub vaultwarden:3012

   reverse_proxy vaultwarden:80 {
        header_up X-Real-IP {remote_host}
   }
 }

#>

docker-compose up -d
docker ps
docker-compose down
docker-compose up -d

https://vw.qubitpilot.net
#signup


#monitoring
#https://askubuntu.com/questions/293426/what-system-monitoring-tools-are-available
apt install glances -y
reboot
#to use: glances

#update VW
docker stop vaultwarden

docker rm vaultwarden

docker pull vaultwarden/server:latest
cd ~/vaultwarden

docker-compose up -d







#ansible install https://www.server-world.info/en/note?os=Ubuntu_22.04&p=ansible&f=1
#https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html#installing-ansible-on-ubuntu


apt update
apt install software-properties-common -y
add-apt-repository --yes --update ppa:ansible/ansible
apt install ansible -y


#mkdir /etc/ansible
ansible-config init --disabled > ansible.cfg
nano /etc/ansible/ansible.cfg 

<#
# create new : set parameters if need (SSH host key checking)

[defaults]
host_key_checking=True
inventory = inventory
forks = 32

[ssh_connection]
pipelining = true

#>





nano /etc/ansible/hosts 

<#

# create new
# set target hosts
89.110.66.138 ansible_ssh_private_key_file=~/.ssh/vdsina-amskey1-privatekey.pem
102.211.206.14 ansible_ssh_private_key_file=~/.ssh/absolute-jnbkey1-privatekey.pem
77.238.249.223 ansible_ssh_private_key_file=~/.ssh/vdsina-amskey2-privatekey.pem
193.178.170.136 ansible_ssh_private_key_file=~/.ssh/vdsina-key1-privatekey.pem
80.85.245.109 ansible_ssh_private_key_file=~/.ssh/vdsina-amskey1-privatekey.pem
77.238.248.41 ansible_ssh_private_key_file=~/.ssh/vdsina-amskey1-privatekey.pem

89.110.70.187 ansible_ssh_private_key_file=~/.ssh/vdsina-amskey1-privatekey.pem

# set targets as a group
# any group name

[target_servers]
# set targets per line
89.110.66.138 ansible_ssh_private_key_file=~/.ssh/vdsina-amskey1-privatekey.pem
102.211.206.14 ansible_ssh_private_key_file=~/.ssh/absolute-jnbkey1-privatekey.pem
77.238.249.223 ansible_ssh_private_key_file=~/.ssh/vdsina-amskey2-privatekey.pem
193.178.170.136 ansible_ssh_private_key_file=~/.ssh/vdsina-key1-privatekey.pem
80.85.245.109 ansible_ssh_private_key_file=~/.ssh/vdsina-amskey1-privatekey.pem
77.238.248.41 ansible_ssh_private_key_file=~/.ssh/vdsina-amskey1-privatekey.pem

#>


# confirm settings
# show all defined hosts
ansible all --list-hosts 
ansible target_servers --list-hosts 

ansible 77.238.248.41 -m ping 

nano ufw.yml 
<#
- hosts: 89.110.70.187
  # use privilege (default : root)
  
  tasks:
  # task settings
  - name: ufw is installed
    apt:
      name: ufw
      state: present
  - name: ufw is running and enabled
    service:
      name: ufw
      state: started
      enabled: yes

  - name: Enable and allow all access to tcp port 22
    community.general.ufw:
     state: enabled
     rule: allow
     port: '22'
     proto: tcp

  - name: Set logging
     community.general.ufw:
      logging: 'on'


#>
ansible-playbook ufw.yml


nano initial.yml

<#

- hosts: 89.110.70.187
  
  tasks:
    - name: Run the equivalent of "apt-get update" as a separate step
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade the OS (apt-get dist-upgrade)
      apt:
        upgrade: dist
        autoremove: true

    - name: Check if a reboot is required.
      stat:
        path: /var/run/reboot-required
        get_checksum: no
      register: reboot_required_file

    - name: Reboot the server (if required).
      reboot:
      when: reboot_required_file.stat.exists == true

    - name: Remove dependencies that are no longer required.
      ansible.builtin.apt:
        autoremove: yes

    - name: Configure sshd
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regex: "^(#)?{{item.key}}"
        line: "{{item.key}} {{item.value}}"
        state: present
      loop:
        - { key: "PermitRootLogin", value: "yes" }
        - { key: "PasswordAuthentication", value: "no" } 
      notify:
        - restart ssh

    #>









